{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A canonical asset pricing job\n",
    "\n",
    "Let's estimate, for each firm, for each year, the alpha, beta, and size and value loadings.\n",
    "\n",
    "So we want a dataset that looks like this:\n",
    "\n",
    "| Firm | Year | alpha | beta | \n",
    "| --- | --- | --- | --- |\n",
    "| GM | 2000 | 0.01 | 1.04 |\n",
    "| GM | 2001 | -0.005 | 0.98 |\n",
    "\n",
    "...but it will do this for every firm, every year!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas_datareader as pdr\n",
    "import seaborn as sns\n",
    "# import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load your stock returns. Here, I'll use this dataset, but you can use anything. \n",
    "\n",
    "The returns don't even have to be firms. \n",
    "\n",
    "**They can be any asset.** (Portfolios, mutual funds, crypto, ...)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "crsp = pd.read_stata('https://github.com/LeDataSciFi/ledatascifi-2021/blob/main/data/3firm_ret_1990_2020.dta?raw=true')\n",
    "crsp['ret'] = crsp['ret']*100 # convert to precentage to match FF's convention on scaling (daily % rets)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then grab the market returns. Here, we will use one of the Fama-French datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "ff = pdr.get_data_famafrench('F-F_Research_Data_5_Factors_2x3_daily',start=1980,end=2010)[0] # the [0] is because the imported obect is a dictionary, and key=0 is the dataframe\n",
    "ff = ff.reset_index().rename(columns={\"Mkt-RF\":\"mkt_excess\", \"Date\":\"date\"})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Merge the market returns into the stock returns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "crsp_ready = pd.merge(left=ff, right=crsp, on='date', how=\"inner\",\n",
    "                      indicator=True, validate=\"one_to_many\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So the data's basically ready. Again, the goal is to estimate, for each firm, for each year, the alpha, beta, and size and value loadings. \n",
    "\n",
    "You caught that right? I have a dataframe, and **for each** firm, and **for each** year, I want to \\<do stuff\\> (run regressions).\n",
    "    \n",
    "**Pandas + \"for each\" = groupby!**\n",
    "\n",
    "So we will _basically_ run `crsp.groupby([firm,year]).runregression()`. Except there is no \"runregression\" function that applies to pandas groupby objects. Small workaround: `crsp.groupby([firm,year]).apply(<our own reg fcn>)`.\n",
    "\n",
    "We just need to write a reg function that works on groupby objects. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "def reg_in_groupby(df,formula=\"ret_excess ~ mkt_excess + SMB + HML\"):\n",
    "    '''\n",
    "    Want to run regressions after groupby?\n",
    "    \n",
    "    This will do it! \n",
    "    \n",
    "    Note: This defaults to a FF3 model assuming specific variable names. If you\n",
    "    want to run any other regression, just specify your model.\n",
    "    \n",
    "    Usage: \n",
    "        df.groupby(<whatever>).apply(reg_in_groupby)\n",
    "        df.groupby(<whatever>).apply(reg_in_groupby,formula=<whatever>)\n",
    "    '''\n",
    "    return pd.Series(sm.formula.ols(formula,data = df).fit().params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's apply that to our returns! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>permno</th>\n",
       "      <th>year</th>\n",
       "      <th>alpha</th>\n",
       "      <th>beta</th>\n",
       "      <th>SMB</th>\n",
       "      <th>HML</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10107.0</td>\n",
       "      <td>1990</td>\n",
       "      <td>0.042351</td>\n",
       "      <td>0.329337</td>\n",
       "      <td>-0.627803</td>\n",
       "      <td>-3.094143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10107.0</td>\n",
       "      <td>1991</td>\n",
       "      <td>0.154813</td>\n",
       "      <td>1.350377</td>\n",
       "      <td>-0.166336</td>\n",
       "      <td>-0.901889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10107.0</td>\n",
       "      <td>1992</td>\n",
       "      <td>0.121780</td>\n",
       "      <td>1.610188</td>\n",
       "      <td>0.241002</td>\n",
       "      <td>-1.281456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10107.0</td>\n",
       "      <td>1993</td>\n",
       "      <td>0.019707</td>\n",
       "      <td>1.372881</td>\n",
       "      <td>-0.204308</td>\n",
       "      <td>-1.273144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10107.0</td>\n",
       "      <td>1994</td>\n",
       "      <td>0.166985</td>\n",
       "      <td>0.983203</td>\n",
       "      <td>-0.622969</td>\n",
       "      <td>-1.226662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>65875.0</td>\n",
       "      <td>2005</td>\n",
       "      <td>-0.117886</td>\n",
       "      <td>0.853634</td>\n",
       "      <td>-0.547212</td>\n",
       "      <td>-0.047118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76</th>\n",
       "      <td>65875.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>0.076401</td>\n",
       "      <td>1.029162</td>\n",
       "      <td>-0.381499</td>\n",
       "      <td>-0.219379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>77</th>\n",
       "      <td>65875.0</td>\n",
       "      <td>2007</td>\n",
       "      <td>0.053763</td>\n",
       "      <td>0.859263</td>\n",
       "      <td>-0.364127</td>\n",
       "      <td>0.047620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>78</th>\n",
       "      <td>65875.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>0.088386</td>\n",
       "      <td>0.839751</td>\n",
       "      <td>-0.314287</td>\n",
       "      <td>0.022244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>65875.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>-0.049534</td>\n",
       "      <td>0.751370</td>\n",
       "      <td>-0.271907</td>\n",
       "      <td>-0.193505</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     permno  year     alpha      beta       SMB       HML\n",
       "0   10107.0  1990  0.042351  0.329337 -0.627803 -3.094143\n",
       "1   10107.0  1991  0.154813  1.350377 -0.166336 -0.901889\n",
       "2   10107.0  1992  0.121780  1.610188  0.241002 -1.281456\n",
       "3   10107.0  1993  0.019707  1.372881 -0.204308 -1.273144\n",
       "4   10107.0  1994  0.166985  0.983203 -0.622969 -1.226662\n",
       "..      ...   ...       ...       ...       ...       ...\n",
       "75  65875.0  2005 -0.117886  0.853634 -0.547212 -0.047118\n",
       "76  65875.0  2006  0.076401  1.029162 -0.381499 -0.219379\n",
       "77  65875.0  2007  0.053763  0.859263 -0.364127  0.047620\n",
       "78  65875.0  2008  0.088386  0.839751 -0.314287  0.022244\n",
       "79  65875.0  2009 -0.049534  0.751370 -0.271907 -0.193505\n",
       "\n",
       "[80 rows x 6 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(\n",
    "    crsp_ready # grab the data\n",
    "    \n",
    "    # Two things before the regressions:\n",
    "    # 1. need a year variable (to group on)\n",
    "    # 2. the market returns in FF are excess returns, so \n",
    "    #    our stock returns need to be excess as well\n",
    "    .assign(year = crsp_ready.date.dt.year,\n",
    "           ret_excess = crsp_ready.ret - crsp_ready.RF)\n",
    "    \n",
    "    # ok, run the regs, so easy!\n",
    "    .groupby(['permno','year']).apply(reg_in_groupby)\n",
    "    \n",
    "    # and clean up - with better var names\n",
    "    .rename(columns={'Intercept':'alpha','mkt_excess':'beta'})\n",
    "    .reset_index()\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How cool is that!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary\n",
    "\n",
    "This is all you need to do:\n",
    "\n",
    "1. Set up the data like you would have to no matter what:\n",
    "    1. Load your stock prices.\n",
    "    1. Merge in the market returns and any factors you want to include in your model.\n",
    "    1. Make sure your returns are scaled like your factors (e.g., above, I converted to percentages to match the FF convention)\n",
    "    1. Make sure your asset returns and market returns are both excess returns (or both are not excess returns)\n",
    "    1. Create any variables you want to group on (e.g. above, I created a year variable)\n",
    "3. `df.groupby(<whatever>).apply(reg_in_groupby)`\n",
    "\n",
    "Holy smokes! "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
